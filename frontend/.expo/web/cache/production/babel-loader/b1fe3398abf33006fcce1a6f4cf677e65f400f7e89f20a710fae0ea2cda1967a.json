{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{db}from\"./firebase\";import{collection,addDoc,serverTimestamp}from'firebase/firestore';var sessionId=Date.now().toString();export var logUserResponse=function(){var _ref=_asyncToGenerator(function*(questionData){try{var question=questionData.question,response=questionData.response,questionIndex=questionData.questionIndex,isLoggedIn=questionData.isLoggedIn,_questionData$userId=questionData.userId,userId=_questionData$userId===void 0?null:_questionData$userId;yield addDoc(collection(db,'user_responses'),{question:question,response:response,questionIndex:questionIndex,timestamp:serverTimestamp(),userId:userId,isLoggedIn:isLoggedIn,sessionId:sessionId,userAgent:navigator.userAgent,platform:navigator.platform});}catch(error){console.error('Error logging user response:',error);}});return function logUserResponse(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"names":["db","collection","addDoc","serverTimestamp","sessionId","Date","now","toString","logUserResponse","_ref","_asyncToGenerator","questionData","question","response","questionIndex","isLoggedIn","_questionData$userId","userId","timestamp","userAgent","navigator","platform","error","console","_x","apply","arguments"],"sources":["/Users/almorris/cursor-test/frontend/src/services/analytics.js"],"sourcesContent":["import { db } from './firebase';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\n\n// Create a session ID when the module loads\nconst sessionId = Date.now().toString();\n\nexport const logUserResponse = async (questionData) => {\n  try {\n    const { question, response, questionIndex, isLoggedIn, userId = null } = questionData;\n    \n    await addDoc(collection(db, 'user_responses'), {\n      question,\n      response,\n      questionIndex,\n      timestamp: serverTimestamp(),\n      userId,\n      isLoggedIn,\n      sessionId,\n      userAgent: navigator.userAgent,\n      platform: navigator.platform\n    });\n  } catch (error) {\n    console.error('Error logging user response:', error);\n  }\n}; "],"mappings":"uEAAA,OAASA,EAAE,kBACX,OAASC,UAAU,CAAEC,MAAM,CAAEC,eAAe,KAAQ,oBAAoB,CAGxE,GAAM,CAAAC,SAAS,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAEvC,MAAO,IAAM,CAAAC,eAAe,gBAAAC,IAAA,CAAAC,iBAAA,CAAG,UAAOC,YAAY,CAAK,CACrD,GAAI,CACF,GAAQ,CAAAC,QAAQ,CAAyDD,YAAY,CAA7EC,QAAQ,CAAEC,QAAQ,CAA+CF,YAAY,CAAnEE,QAAQ,CAAEC,aAAa,CAAgCH,YAAY,CAAzDG,aAAa,CAAEC,UAAU,CAAoBJ,YAAY,CAA1CI,UAAU,CAAAC,oBAAA,CAAoBL,YAAY,CAA9BM,MAAM,CAANA,MAAM,CAAAD,oBAAA,UAAG,IAAI,CAAAA,oBAAA,CAEpE,KAAM,CAAAd,MAAM,CAACD,UAAU,CAACD,EAAE,CAAE,gBAAgB,CAAC,CAAE,CAC7CY,QAAQ,CAARA,QAAQ,CACRC,QAAQ,CAARA,QAAQ,CACRC,aAAa,CAAbA,aAAa,CACbI,SAAS,CAAEf,eAAe,CAAC,CAAC,CAC5Bc,MAAM,CAANA,MAAM,CACNF,UAAU,CAAVA,UAAU,CACVX,SAAS,CAATA,SAAS,CACTe,SAAS,CAAEC,SAAS,CAACD,SAAS,CAC9BE,QAAQ,CAAED,SAAS,CAACC,QACtB,CAAC,CAAC,CACJ,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACtD,CACF,CAAC,iBAlBY,CAAAd,eAAeA,CAAAgB,EAAA,SAAAf,IAAA,CAAAgB,KAAA,MAAAC,SAAA,OAkB3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}