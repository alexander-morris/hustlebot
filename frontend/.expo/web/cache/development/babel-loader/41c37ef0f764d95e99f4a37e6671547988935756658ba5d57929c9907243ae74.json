{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar isDev = process.env.NODE_ENV === 'development';\nvar API_URL = isDev ? 'http://localhost:4000/api' : '/api';\nexport var sendMessage = function () {\n  var _ref = _asyncToGenerator(function* (message) {\n    try {\n      var response = yield fetch(`${API_URL}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: message\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return yield response.json();\n    } catch (error) {\n      console.error('AI service error:', error);\n      throw error;\n    }\n  });\n  return function sendMessage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var validateInvite = function () {\n  var _ref2 = _asyncToGenerator(function* (code) {\n    try {\n      if (isDev) {\n        console.log('[DEV] Validating invite:', code);\n      }\n      var response = yield fetch(`${API_URL}/invite/validate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code: code\n        })\n      });\n      if (!response.ok) {\n        var errorData = yield response.json().catch(function () {\n          return {};\n        });\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      if (isDev) {\n        console.log('[DEV] Response status:', response.status);\n      }\n      var data = yield response.json();\n      if (isDev) {\n        console.log('[DEV] Response data:', data);\n      }\n      return data;\n    } catch (error) {\n      console.error('Invite validation error:', error.message);\n      throw error;\n    }\n  });\n  return function validateInvite(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["isDev","process","env","NODE_ENV","API_URL","sendMessage","_ref","_asyncToGenerator","message","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","console","_x","apply","arguments","validateInvite","_ref2","code","log","errorData","catch","status","data","_x2"],"sources":["/Users/almorris/cursor-test/frontend/src/services/ai.js"],"sourcesContent":["const isDev = process.env.NODE_ENV === 'development';\nconst API_URL = isDev ? 'http://localhost:4000/api' : '/api';\n\nexport const sendMessage = async (message) => {\n  try {\n    const response = await fetch(`${API_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ message }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('AI service error:', error);\n    throw error;\n  }\n};\n\nexport const validateInvite = async (code) => {\n  try {\n    if (isDev) {\n      console.log('[DEV] Validating invite:', code);\n    }\n    \n    const response = await fetch(`${API_URL}/invite/validate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ code }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n    }\n\n    if (isDev) {\n      console.log('[DEV] Response status:', response.status);\n    }\n\n    const data = await response.json();\n    if (isDev) {\n      console.log('[DEV] Response data:', data);\n    }\n    return data;\n  } catch (error) {\n    console.error('Invite validation error:', error.message);\n    throw error;\n  }\n};\n"],"mappings":";AAAA,IAAMA,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;AACpD,IAAMC,OAAO,GAAGJ,KAAK,GAAG,2BAA2B,GAAG,MAAM;AAE5D,OAAO,IAAMK,WAAW;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,OAAO,EAAK;IAC5C,IAAI;MACF,IAAMC,QAAQ,SAASC,KAAK,CAAC,GAAGN,OAAO,OAAO,EAAE;QAC9CO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEP,OAAO,EAAPA;QAAQ,CAAC;MAClC,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,aAAaR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBAnBYd,WAAWA,CAAAgB,EAAA;IAAA,OAAAf,IAAA,CAAAgB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAmBvB;AAED,OAAO,IAAMC,cAAc;EAAA,IAAAC,KAAA,GAAAlB,iBAAA,CAAG,WAAOmB,IAAI,EAAK;IAC5C,IAAI;MACF,IAAI1B,KAAK,EAAE;QACToB,OAAO,CAACO,GAAG,CAAC,0BAA0B,EAAED,IAAI,CAAC;MAC/C;MAEA,IAAMjB,QAAQ,SAASC,KAAK,CAAC,GAAGN,OAAO,kBAAkB,EAAE;QACzDO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEW,IAAI,EAAJA;QAAK,CAAC;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACjB,QAAQ,CAACO,EAAE,EAAE;QAChB,IAAMY,SAAS,SAASnB,QAAQ,CAACS,IAAI,CAAC,CAAC,CAACW,KAAK,CAAC;UAAA,OAAO,CAAC,CAAC;QAAA,CAAC,CAAC;QACzD,MAAM,IAAIZ,KAAK,CAACW,SAAS,CAACpB,OAAO,IAAI,uBAAuBC,QAAQ,CAACqB,MAAM,EAAE,CAAC;MAChF;MAEA,IAAI9B,KAAK,EAAE;QACToB,OAAO,CAACO,GAAG,CAAC,wBAAwB,EAAElB,QAAQ,CAACqB,MAAM,CAAC;MACxD;MAEA,IAAMC,IAAI,SAAStB,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,IAAIlB,KAAK,EAAE;QACToB,OAAO,CAACO,GAAG,CAAC,sBAAsB,EAAEI,IAAI,CAAC;MAC3C;MACA,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACX,OAAO,CAAC;MACxD,MAAMW,KAAK;IACb;EACF,CAAC;EAAA,gBAhCYK,cAAcA,CAAAQ,GAAA;IAAA,OAAAP,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAgC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}